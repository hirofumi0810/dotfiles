######################################################################
# ステータスバー
######################################################################
# ステータスバーをトップに配置する
set -g status-position top

# 左右のステータスバーの長さを決定する
set -g status-left-length 90
set -g status-right-length 90

# 左パネルを設定する
# #H => マシン名、#P => ペイン番号（最左に表示）
set -g status-left '#H:[#P]'

# 右パネルを設定する
# Wi-Fi、バッテリー残量、現在時刻（最右に表示）
# set -g status-right '#(bin/battery.sh --tmux) [%Y-%m-%d(%a) %H:%M]'
# (getwifi.sh)

# ステータスバーを Utf-8 に対応
# set -g status-utf8 on  # this is no longer necessary

# ステータスバーを1秒毎に描画し直す
set -g status-interval 1

# センタライズ（主にウィンドウ番号など）
set -g status-justify centre

# window-status のフォーマットを指定する
set-window-option -g window-status-format " #I: #W "
# カレントウィンドウの window-status のフォーマットを指定する
set-window-option -g window-status-current-format "#[fg=colour255,bg=colour27,bold] #I: #W #[default]"

# ヴィジュアルノーティフィケーションを有効にする
setw -g monitor-activity on
set -g visual-activity on


#####################################################################
# カラースキーム(Solarized 256)
######################################################################
# ステータスバーを設定する
set -g status-bg colour235 #base02
set -g status-fg colour136 #yellow
set -g status-attr default

# ウィンドウリストの色を設定する
set -g window-status-fg colour244 #base0
set -g window-status-bg default
#set -g window-status-attr dim

# アクティブなウィンドウを目立たせる
set -g window-status-current-fg colour166 #orange
set -g window-status-current-bg default
#set -g window-status-current-attr bright

# ペインボーダーの色を設定する
set -g pane-border-fg colour235 #base02

# アクティブなペインを目立たせる
set -g pane-active-border-fg colour240 #base01

# コマンドラインの色を設定する
set -g message-bg colour235 #base02
set -g message-fg colour166 #orange

# pane number display
set -g display-panes-active-colour colour33 #blue
set -g display-panes-colour colour166 #orange

# clock
set -g clock-mode-colour colour64 #green

# bell
set -g window-status-bell-style fg=colour235,bg=colour160 #base02, red


######################################################################
# プレフィックスキーの変更
######################################################################
set -g prefix C-z
bind-key C-z send-prefix
unbind-key C-b

######################################################################
# キー操作
######################################################################
# Vi キーバインド
setw -g mode-keys vi

# Prefix+v でコピーモード開始
bind-key v copy-mode \; display "Copy mode!"
if "[[ $(tmux -V | cut -c 6-) < 2.4 ]]"  'bind-key -t vi-copy v begin-selection'
if "[[ $(tmux -V | cut -c 6-) >= 2.4 ]]" 'bind-key -T copy-mode-vi v send-keys -X begin-selection'

# Prefix+Enter/y でコピー
### for Mac
if "[[ $(uname) = 'Darwin' ]]" 'set-option -g default-shell /usr/local/bin/zsh'
if "[[ $(uname) = 'Darwin' ]]" 'bind-key -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "reattach-to-user-namespace pbcopy"'
if "[[ $(uname) = 'Darwin' ]]" 'bind-key -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel "reattach-to-user-namespace pbcopy"'
### for Ubuntu
if "[[ $(uname) = 'Linux' ]]" 'set-option -g default-shell $(which zsh)'
if "[[ $(uname) = 'Linux' ]]" 'setw -g mode-keys vi'
# if "[[ $(uname) = 'Linux' ]]" 'bind-key -T copy-mode-vi y send -X copy-pipe-and-cancel "xsel -ip && xsel -op | xsel -ib"'
# if "[[ $(uname) = 'Linux' ]]" 'bind-key -T copy-mode-vi Enter send -X copy-pipe-and-cancel "xsel -ip && xsel -op | xsel -ib"'
# if "[[ $(uname) = 'Linux' ]]" 'bind-key -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "xclip -i -sel clip"'
# if "[[ $(uname) = 'Linux' ]]" 'bind-key -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel "xclip -i -sel clip"'
bind-key -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "xclip -i -sel clip"
bind-key -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel "xclip -i -sel clip"
# TODO(Hirofumi): if sentence is not working now
# TODO(Hirofumi): manage depending on the version

# Prefix+p でペースト (クリップボードにも保存されているので Cmd-v でもペースト可能)
bind-key p paste-buffer

# vim <=> tmux 間でクリップボード利用を可能にする
### for Mac
if "[[ $(uname) = 'Darwin' ]]" 'set -g default-command "reattach-to-user-namespace -l $SHELL"'

# Esc キーでコピーの反転を解除（コピーモードは抜けない）
if "[[ $(tmux -V | cut -c 6-) < 2.4 ]]"  'bind-key -t vi-copy Escape clear-selection'
if "[[ $(tmux -V | cut -c 6-) >= 2.4 ]]" 'bind-key -T copy-mode-vi Escape send-keys -X clear-selection'
# Ctrl-c キーでコピーの反転を解除し、コピーモードから抜ける
if "[[ $(tmux -V | cut -c 6-) < 2.4 ]]"  'bind-key -t vi-copy C-c cancel'
if "[[ $(tmux -V | cut -c 6-) >= 2.4 ]]" 'bind-key -T copy-mode-vi C-c send-keys -X cancel'

# コピーモード中（Prefix+v 後）C-v で矩形選択開始
if "[[ $(tmux -V | cut -c 6-) < 2.4 ]]"  'bind-key -t vi-copy C-v rectangle-toggle'
if "[[ $(tmux -V | cut -c 6-) >= 2.4 ]]" 'bind-key -T copy-mode-vi C-v send-keys -X rectangle-toggle'
# 1行選択
if "[[ $(tmux -V | cut -c 6-) < 2.4 ]]"  'bind-key -t vi-copy V select-line'
if "[[ $(tmux -V | cut -c 6-) >= 2.4 ]]" 'bind-key -T copy-mode-vi V send-keys -X select-line'

# Vi モード中に Ctrl-a で行頭に（Emacs ライク）
if "[[ $(tmux -V | cut -c 6-) < 2.4 ]]"  'bind-key -t vi-copy C-a start-of-line'
if "[[ $(tmux -V | cut -c 6-) >= 2.4 ]]" 'bind-key -T copy-mode-vi C-a send-keys -X start-of-line'
# Vi モード中に Ctrl-e で行末に（Emacs ライク）
if "[[ $(tmux -V | cut -c 6-) < 2.4 ]]"  'bind-key -t vi-copy C-e end-of-line'
if "[[ $(tmux -V | cut -c 6-) >= 2.4 ]]" 'bind-key -T copy-mode-vi C-e send-keys -X end-of-line'

# 単語の最初の1文字に移動
if "[[ $(tmux -V | cut -c 6-) < 2.4 ]]"  'bind-key -t vi-copy w next-word'
if "[[ $(tmux -V | cut -c 6-) >= 2.4 ]]" 'bind-key -T copy-mode-vi w send-keys -X next-word'
# 単語の最後の1文字に移動
if "[[ $(tmux -V | cut -c 6-) < 2.4 ]]"  'bind-key -t vi-copy e next-word-end'
if "[[ $(tmux -V | cut -c 6-) >= 2.4 ]]" 'bind-key -T copy-mode-vi e send-keys -X next-word-end'
# w の逆の動き back
if "[[ $(tmux -V | cut -c 6-) < 2.4 ]]"  'bind-key -t vi-copy b previous-word'
if "[[ $(tmux -V | cut -c 6-) >= 2.4 ]]" 'bind-key -T copy-mode-vi b send-keys -X previous-word'

# 画面上に映る最上行に移動
if "[[ $(tmux -V | cut -c 6-) < 2.4 ]]"  'bind-key -t vi-copy g top-line'
if "[[ $(tmux -V | cut -c 6-) >= 2.4 ]]" 'bind-key -T copy-mode-vi g send-keys -X top-line'
# 画面上に映る最下行に移動
if "[[ $(tmux -V | cut -c 6-) < 2.4 ]]"  'bind-key -t vi-copy G bottom-line'
if "[[ $(tmux -V | cut -c 6-) >= 2.4 ]]" 'bind-key -T copy-mode-vi G send-keys -X bottom-line'

# 前方検索
if "[[ $(tmux -V | cut -c 6-) < 2.4 ]]"  'bind-key -t vi-copy / search-forward'
if "[[ $(tmux -V | cut -c 6-) >= 2.4 ]]" 'bind-key -T copy-mode-vi / send-keys -X search-forward'
# 後方検索
if "[[ $(tmux -V | cut -c 6-) < 2.4 ]]"  'bind-key -t vi-copy ? search-backward'
if "[[ $(tmux -V | cut -c 6-) >= 2.4 ]]" 'bind-key -T copy-mode-vi ? send-keys -X search-backward'

# ページスクロール
if "[[ $(tmux -V | cut -c 6-) < 2.4 ]]"  'bind-key -t vi-copy C-n page-up'
if "[[ $(tmux -V | cut -c 6-) < 2.4 ]]"  'bind-key -t vi-copy C-f page-down'
if "[[ $(tmux -V | cut -c 6-) >= 2.4 ]]" 'bind-key -T copy-mode-vi C-n send-keys -X page-up'
if "[[ $(tmux -V | cut -c 6-) >= 2.4 ]]" 'bind-key -T copy-mode-vi C-f send-keys -X page-down'

# ページ送り
if "[[ $(tmux -V | cut -c 6-) < 2.4 ]]"  'bind-key -t vi-copy C-u scroll-up'
if "[[ $(tmux -V | cut -c 6-) < 2.4 ]]"  'bind-key -t vi-copy C-d scroll-down'
if "[[ $(tmux -V | cut -c 6-) >= 2.4 ]]" 'bind-key -T copy-mode-vi C-u send-keys -X scroll-up'
if "[[ $(tmux -V | cut -c 6-) >= 2.4 ]]" 'bind-key -T copy-mode-vi C-d send-keys -X scroll-down'


######################################################################
# ペイン・ウィンドウ操作
######################################################################
# ウィンドウとペインの番号を1から開始する（デフォルト0）
set -g base-index 1
set -g pane-base-index 1

# Prefix+- で横に、Prefix+| で縦に分割（ペイン）する
bind-key | split-window -h
bind-key - split-window -v

# Prefix + Ctrl-h/l でウィンドウ切り替え
# Prefix + Ctrl-h,h,h,h,...と連打できる
bind-key -r C-h select-window -t :-
bind-key -r C-l select-window -t :+

# Prefix+hjkl でペイン移動
bind-key -n S-left select-pane -L
bind-key -n S-down select-pane -D
bind-key -n S-up select-pane -U
bind-key -n S-right select-pane -R

# ペインサイズを上下左右（Prefix+JKHL）に変更
# Prefix+J,J,J,J,...と連打してリサイズ可能
bind-key -r H resize-pane -L 5
bind-key -r J resize-pane -D 5
bind-key -r K resize-pane -U 5
bind-key -r L resize-pane -R 5

# Ctrl-o でペインをローテーションしながら移動
# Prefix を用いないのでタイプが楽だが、Ctrl-o を使用してしまう他のソフトウェアの設定に支障をきたさないように注意
bind-key -n C-o select-pane -t :.+


######################################################################
# マウス操作
######################################################################
setw -g mouse on
# set -g mouse-select-window on
if "[[ $(tmux -V | cut -c 6-) >= 2.4 ]]" 'set -g mode-mouse on'
if "[[ $(tmux -V | cut -c 6-) >= 2.4 ]]" 'set -g mouse-select-pane on'
if "[[ $(tmux -V | cut -c 6-) >= 2.4 ]]" 'set -g mouse-resize-pane on'
if "[[ $(tmux -V | cut -c 6-) >= 2.4 ]]" 'set -g mouse-select-window on'
bind-key -n WheelUpPane if-shell -F -t = "#{mouse_any_flag}" "send-keys -M" "if -Ft= '#{pane_in_mode}' 'send-keys -M' 'copy-mode -e'"


######################################################################
# Plugins
# reference: https://gist.github.com/andrenbrandao/701dc935b45666791183eb0948921bb7
######################################################################
# List of plugins
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-sensible'
set -g @plugin 'dracula/tmux'
set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @plugin 'tmux-plugins/tmux-continuum'

# Config Dracula Theme
set -g @dracula-show-fahrenheit false
set -g @dracula-show-powerline true
set -g @dracula-show-network false
set -g @dracula-show-left-icon session
set -g @dracula-cpu-usage true
set -g @dracula-ram-usage true
set -g @dracula-day-month true
set -g @dracula-military-time true
set -g @dracula-show-flags true

# Set 256 colors
set -s default-terminal 'tmux-256color'

# reload config file (change file location to your the tmux.conf you want to use)
bind r source-file ${HOME}/.tmux.conf

# Other examples:
# set -g @plugin 'github_username/plugin_name'
# set -g @plugin 'git@github.com:user/plugin'
# set -g @plugin 'git@bitbucket.com:user/plugin'

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run '${HOME}/.tmux/plugins/tpm/tpm'
